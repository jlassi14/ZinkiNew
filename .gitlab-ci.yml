# Define the stages for the pipeline
stages:
  - build-backend
  - build-apk
  - deploy

# Define the jobs for each stage
build-backend:
  stage: build-backend
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker build -t jlassi14/backend1:$CI_COMMIT_SHORT_SHA -f backend/Dockerfile.dev ./backend
    - if [ $? -eq 0 ]; then echo "Docker build succeeded"; else echo "Docker build failed"; fi
    - echo "$CI_REGISTRY_USER" 
    - echo "$CI_REGISTRY_PASSWORD" 
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin
    - docker push jlassi14/backend1:$CI_COMMIT_SHORT_SHA
    - if [ $? -eq 0 ]; then echo "Docker push succeeded"; else echo "Docker push failed"; fi

build-apk:
  stage: build-apk
  image: node:lts
  variables:
    ANDROID_HOME: /opt/android
    GRADLE_USER_HOME: cache/.gradle
    CACHE_NAME: apk_cache
  cache:
    key: ${CI_COMMIT_REF_SLUG}-${CACHE_NAME}
    paths:
      - zinkinew/android/.gradle/
      - zinkinew/node_modules/
      - zinkinew/android/app/build/outputs/
  script:
    - npm install
    - npx react-native run-android --variant=release
    - mv android/app/build/outputs/apk/release/app-release.apk app.apk
    - if [ $? -eq 0 ]; then echo "APK build succeeded"; else echo "APK build failed"; fi
    - echo "Deploying APK to web server..."
    - if [ $? -eq 0 ]; then echo "APK deployment succeeded"; else echo "APK deployment failed"; fi


deploy:
  stage: deploy
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin
    - docker pull jlassi14/backend1:$CI_COMMIT_SHORT_SHA
    - docker run -d --name backend -p 5000:5000 -e NODE_ENV=production jlassi14/backend1:$CI_COMMIT_SHORT_SHA
